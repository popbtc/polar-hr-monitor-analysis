import 'dart:io';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter/foundation.dart';
import 'package:location/location.dart' as loc;

/// üîê ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Permission ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ ‡∏û‡∏£‡πâ‡∏≠‡∏° Snackbar ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
class Permissions {
  // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  static Future<bool> checkAll() async {
    try {
      final bluetoothGranted = await _checkBluetoothPermissions();
      final locationGranted = await Permission.locationWhenInUse.isGranted;
      final notificationGranted = await Permission.notification.isGranted;

      return bluetoothGranted && locationGranted && notificationGranted;
    } catch (e) {
      debugPrint("checkAll() error: $e");
      return false;
    }
  }

  // üîπ ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
  static Future<void> requestAll(BuildContext context) async {
    try {
      await requestBluetooth();
      await requestLocation(context);
      await requestNotification();
    } catch (e) {
      debugPrint("requestAll() error: $e");
    }
  }

  // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Bluetooth (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Android 12+)
  static Future<bool> _checkBluetoothPermissions() async {
    if (Platform.isAndroid) {
      final scan = await Permission.bluetoothScan.status;
      final connect = await Permission.bluetoothConnect.status;
      return scan.isGranted && connect.isGranted;
    } else {
      final status = await Permission.bluetooth.status;
      return status.isGranted;
    }
  }

  // üîπ ‡∏Ç‡∏≠ Bluetooth permission (Nearby Devices)
  static Future<bool> requestBluetooth() async {
    try {
      if (Platform.isAndroid) {
        final scan = await Permission.bluetoothScan.request();
        final connect = await Permission.bluetoothConnect.request();
        return scan.isGranted && connect.isGranted;
      } else {
        final status = await Permission.bluetooth.request();
        return status.isGranted;
      }
    } catch (e) {
      debugPrint("requestBluetooth() error: $e");
      return false;
    }
  }

  // üîπ ‡∏Ç‡∏≠ Location permission (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BLE scan)
  static Future<bool> requestLocation(BuildContext context) async {
    try {
      // 1Ô∏è‚É£ ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Location ‡∏Å‡πà‡∏≠‡∏ô
      final status = await Permission.locationWhenInUse.request();
      if (!status.isGranted) {
        _showSnackBar(
          context,
          message: "‚ö†Ô∏è Location permission required",
          actionLabel: "Open Settings",
          onPressed: openAppSettings,
        );
        return false;
      }

      // 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î Location Service ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      final location = loc.Location();
      bool serviceEnabled = await location.serviceEnabled();
      if (!serviceEnabled) {
        serviceEnabled = await location.requestService();
        if (!serviceEnabled) {
          _showSnackBar(
            context,
            message: "‚ö†Ô∏è Please enable Location Service",
            actionLabel: "Open Settings",
            onPressed: openAppSettings,
          );
          return false;
        }
      }

      return true;
    } catch (e) {
      debugPrint("requestLocation() error: $e");
      return false;
    }
  }

  // üîπ ‡∏Ç‡∏≠ Notification permission
  static Future<bool> requestNotification() async {
    try {
      final status = await Permission.notification.request();
      return status.isGranted;
    } catch (e) {
      debugPrint("requestNotification() error: $e");
      return false;
    }
  }

  // üîπ ‡πÄ‡∏õ‡∏¥‡∏î Settings
  static Future<void> openSettings() async {
    await openAppSettings();
  }

  // üîπ ‡πÅ‡∏™‡∏î‡∏á Snackbar ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° ‚ÄúOpen Settings‚Äù
  static void _showSnackBar(
      BuildContext context, {
        required String message,
        required String actionLabel,
        required VoidCallback onPressed,
      }) {
    final messenger = ScaffoldMessenger.of(context);
    messenger.clearSnackBars();
    messenger.showSnackBar(
      SnackBar(
        content: Text(message, style: const TextStyle(fontSize: 15)),
        action: SnackBarAction(
          label: actionLabel,
          onPressed: onPressed,
          textColor: Colors.white,
        ),
        backgroundColor: Colors.orange.shade800,
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 5),
      ),
    );
  }
}
